# Function to generate Fibonacci numbers
fibonacci <- function(n) {
  fib <- numeric(n)  # Create a numeric vector to store Fibonacci numbers
  fib[1] <- 0       # First Fibonacci number
  fib[2] <- 1       # Second Fibonacci number
  
  for (i in 3:n) {
    fib[i] <- fib[i - 1] + fib[i - 2]  # Calculate the next Fibonacci number
  }
  
  return(fib)
}

# Get the first 20 Fibonacci numbers
first_20_fib <- fibonacci(20)

# Print the first 20 Fibonacci numbers
cat("The first 20 Fibonacci numbers are:\n")
print(first_20_fib)



py----

pip install pandas numpy matplotlib scikit-learn


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Step 1: Create the DataFrame
Stock_Market = {
    'Year': [2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017,
             2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016],
    'Month': [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,
              12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
    'Interest_Rate': [2.75, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.25, 2.25, 2.25, 2, 2,
                      2, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75, 1.75],
    'Unemployment_Rate': [5.3, 5.3, 5.3, 5.3, 5.4, 5.6, 5.5, 5.5, 5.5, 5.6, 5.7, 5.9,
                          6, 5.9, 5.8, 6.1, 6.2, 6.1, 6.1, 6.1, 5.9, 6.2, 6.2, 6.1],
    'Stock_Index_Price': [1464, 1394, 1357, 1293, 1256, 1254, 1234, 1195, 1159, 1167,
                          1130, 1075, 1047, 965, 943, 958, 971, 949, 884, 866, 876,
                          822, 704, 719]
}

df = pd.DataFrame(Stock_Market)

# Step 2: Define features and target variable
X = df[['Interest_Rate', 'Unemployment_Rate']]  # Features
y = df['Stock_Index_Price']                      # Target variable

# Step 3: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Create and fit the Multiple Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Make predictions (optional, not used for graph)
y_pred = model.predict(X_test)

# Step 6: Plot Stock Index Price vs Interest Rate
plt.figure(figsize=(10, 6))
plt.scatter(df['Interest_Rate'], df['Stock_Index_Price'], color='blue', label='Data Points')
plt.title('Stock Index Price vs Interest Rate')
plt.xlabel('Interest Rate (%)')
plt.ylabel('Stock Index Price')
plt.grid()
plt.legend()
plt.show()
